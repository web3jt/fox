datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource dbEthereum {
//   provider = "postgresql"
//   url      = env("DB_ETH_URL")
// }

model Block {
  blockNumber                 Int                           @id @map("id")
  timestamp                   Int
  EventProtocolFeeRecevied    EventProtocolFeeRecevied[]
  EventMintStarted            EventMintStarted[]
  EventMintClaimed            EventMintClaimed[]
  EventStakeStarted           EventStakeStarted[]
  EventStakeEnded             EventStakeEnded[]
  EventRewardClaimed          EventRewardClaimed[]
  EventTitanBurned            EventTitanBurned[]
  EventETHDistributed         EventETHDistributed[]
  EventCyclePayoutTriggered   EventCyclePayoutTriggered[]
  EventGlobalDailyUpdateStats EventGlobalDailyUpdateStats[]
}

model EventProtocolFeeRecevied {
  id              Int    @id @default(autoincrement())
  blockNumber     Int
  transactionHash String @db.Char(66)
  userAddress     String @db.Char(42)
  day             Int
  amount          String
  block           Block  @relation(fields: [blockNumber], references: [blockNumber])
}

model EventMintStarted {
  tRank           Int    @id
  blockNumber     Int
  transactionHash String @db.Char(66)
  userAddress     String @db.Char(42)
  gMintPower      Int
  mintPower       Int
  numOfDays       Int
  mintStartTs     Int
  maturityTs      Int
  mintPowerBonus  Int
  EAABonus        Int
  mintedTitan     String
  mintableTitan   String
  mintCost        String
  block           Block  @relation(fields: [blockNumber], references: [blockNumber])
}

model EventMintClaimed {
  tRank              Int    @id
  blockNumber        Int
  transactionHash    String @db.Char(66)
  userAddress        String @db.Char(42)
  rewardTitanClaimed String
  penaltyAmount      String
  penaltySeconds     Int
  block              Block  @relation(fields: [blockNumber], references: [blockNumber])
}

model EventStakeStarted {
  globalStakeId   Int    @id
  blockNumber     Int
  transactionHash String @db.Char(66)
  userAddress     String @db.Char(42)
  userStakeId     Int
  numOfDays       Int
  stakeStartTs    Int
  maturityTs      Int
  titanAmount     String
  shares          String
  block           Block  @relation(fields: [blockNumber], references: [blockNumber])
}

model EventStakeEnded {
  globalStakeId     Int    @id
  blockNumber       Int
  transactionHash   String @db.Char(66)
  userAddress       String @db.Char(42)
  titanAmount       String
  penaltyAmount     String
  penaltyPercentage Int
  block             Block  @relation(fields: [blockNumber], references: [blockNumber])
}

model EventRewardClaimed {
  id              Int    @id @default(autoincrement())
  blockNumber     Int
  transactionHash String @db.Char(66)
  userAddress     String @db.Char(42)
  ethAmount       String
  block           Block  @relation(fields: [blockNumber], references: [blockNumber])
}

model EventTitanBurned {
  id                 Int    @id @default(autoincrement())
  blockNumber        Int
  transactionHash    String @db.Char(66)
  userAddress        String @db.Char(42)
  projectAddress     String @db.Char(42)
  burnPoolCycleIndex Int
  source             Int
  amount             String
  block              Block  @relation(fields: [blockNumber], references: [blockNumber])
}

model EventETHDistributed {
  id              Int    @id @default(autoincrement())
  blockNumber     Int
  transactionHash String @db.Char(66)
  calletAddress   String @db.Char(42)
  amount          String
  block           Block  @relation(fields: [blockNumber], references: [blockNumber])
}

model EventCyclePayoutTriggered {
  id              Int    @id @default(autoincrement())
  blockNumber     Int
  transactionHash String @db.Char(66)
  callerAddress   String @db.Char(42)
  cycleNo         Int
  reward          String
  burnReward      String
  block           Block  @relation(fields: [blockNumber], references: [blockNumber])
}

model EventGlobalDailyUpdateStats {
  day             Int    @id
  blockNumber     Int
  transactionHash String @db.Char(66)
  mintCost        String
  shareRate       String
  mintableTitan   String
  mintPowerBonus  Int
  EAABonus        Int
  block           Block  @relation(fields: [blockNumber], references: [blockNumber])
}

generator client {
  provider = "prisma-client-js"
}
